import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  Modal,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Alert,
  Share,
  Dimensions,
  Platform,
} from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';
import QRCode from 'react-native-qrcode-svg';
import * as Haptics from 'expo-haptics';
import { BlurView } from 'expo-blur';
import { EmergencyProfile, emergencyStorage } from '../../lib/storage/EmergencyStorageService';

interface EmergencyShareModalProps {
  visible: boolean;
  onClose: () => void;
  emergencyProfile: EmergencyProfile;
  isEmergencyMode?: boolean;
}

const EmergencyShareModal: React.FC<EmergencyShareModalProps> = ({
  visible,
  onClose,
  emergencyProfile,
  isEmergencyMode = false,
}) => {
  const [qrData, setQrData] = useState<string>('');
  const [shareFormat, setShareFormat] = useState<'qr' | 'text'>('qr');
  const [isGenerating, setIsGenerating] = useState(false);

  const { width, height } = Dimensions.get('window');
  const qrSize = Math.min(width * 0.6, 250);

  // Generate QR code data when modal opens
  useEffect(() => {
    if (visible) {
      generateQRData();
    }
  }, [visible, emergencyProfile]);

  const generateQRData = async () => {
    setIsGenerating(true);

    try {
      const qrCodeData = emergencyStorage.generateEmergencyQRData(emergencyProfile.childId);

      if (qrCodeData) {
        setQrData(qrCodeData);
      } else {
        Alert.alert(
          'Error',
          'Unable to generate emergency information. Please try again.',
          [{ text: 'OK' }]
        );
        onClose();
      }
    } catch (error) {
      console.error('QR generation failed:', error);
      Alert.alert(
        'Error',
        'Failed to generate emergency QR code. Please try again.',
        [{ text: 'OK' }]
      );
    } finally {
      setIsGenerating(false);
    }
  };

  // Share emergency information as text
  const shareAsText = async () => {
    try {
      await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);

      const primaryContact = emergencyProfile.emergencyContacts.find(c => c.isPrimary);
      const { medicalInfo } = emergencyProfile;

      const textContent = `
üö® EMERGENCY MEDICAL INFORMATION üö®

Child: ${emergencyProfile.childName}
Date of Birth: ${emergencyProfile.dateOfBirth}

${medicalInfo.bloodType ? `Blood Type: ${medicalInfo.bloodType}` : ''}

${medicalInfo.allergies.length > 0 ? `
‚ö†Ô∏è ALLERGIES:
${medicalInfo.allergies.map(a => `‚Ä¢ ${a}`).join('\n')}
` : ''}

${medicalInfo.medicalConditions.length > 0 ? `
üè• MEDICAL CONDITIONS:
${medicalInfo.medicalConditions.map(c => `‚Ä¢ ${c}`).join('\n')}
` : ''}

${medicalInfo.medications.length > 0 ? `
üíä CURRENT MEDICATIONS:
${medicalInfo.medications.map(m => `‚Ä¢ ${m}`).join('\n')}
` : ''}

${medicalInfo.emergencyMedicalInfo ? `
üÜò EMERGENCY INFORMATION:
${medicalInfo.emergencyMedicalInfo}
` : ''}

${primaryContact ? `
üìû EMERGENCY CONTACT:
${primaryContact.name} (${primaryContact.relationship})
Phone: ${primaryContact.phoneNumber}
` : ''}

${medicalInfo.healthCardNumber && medicalInfo.province ? `
üá®üá¶ HEALTH CARD:
${medicalInfo.province} - ${medicalInfo.healthCardNumber}
` : ''}

Generated by NestSync Emergency System
      `.trim();

      await Share.share({
        message: textContent,
        title: `Emergency Info - ${emergencyProfile.childName}`,
      });

    } catch (error) {
      console.error('Text sharing failed:', error);
      Alert.alert(
        'Sharing Failed',
        'Unable to share emergency information. Please try again.',
        [{ text: 'OK' }]
      );
    }
  };

  // Handle modal close
  const handleClose = async () => {
    await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    onClose();
  };

  // Emergency contact summary for display
  const primaryContact = emergencyProfile.emergencyContacts.find(c => c.isPrimary);

  return (
    <Modal
      visible={visible}
      transparent={true}
      animationType="slide"
      onRequestClose={handleClose}
    >
      <BlurView
        style={styles.overlay}
        intensity={Platform.OS === 'ios' ? 20 : 0}
        tint="dark"
      >
        <View style={styles.modalContainer}>
          <View style={[
            styles.modalContent,
            isEmergencyMode && styles.emergencyModalContent,
          ]}>
            {/* Header */}
            <View style={styles.header}>
              <View style={styles.headerLeft}>
                <MaterialIcons
                  name="qr-code"
                  size={28}
                  color={isEmergencyMode ? '#FF3B30' : '#007AFF'}
                />
                <View style={styles.headerText}>
                  <Text style={[
                    styles.title,
                    isEmergencyMode && styles.emergencyTitle,
                  ]}>
                    Emergency Information
                  </Text>
                  <Text style={styles.subtitle}>
                    {emergencyProfile.childName}
                  </Text>
                </View>
              </View>
              <TouchableOpacity
                onPress={handleClose}
                style={styles.closeButton}
                accessibilityLabel="Close emergency share modal"
                accessibilityRole="button"
              >
                <MaterialIcons name="close" size={24} color="#666666" />
              </TouchableOpacity>
            </View>

            <ScrollView
              style={styles.scrollContent}
              showsVerticalScrollIndicator={false}
            >
              {/* Format Selection */}
              <View style={styles.formatSelector}>
                <TouchableOpacity
                  style={[
                    styles.formatButton,
                    shareFormat === 'qr' && styles.activeFormatButton,
                  ]}
                  onPress={() => setShareFormat('qr')}
                >
                  <MaterialIcons
                    name="qr-code"
                    size={20}
                    color={shareFormat === 'qr' ? '#FFFFFF' : '#666666'}
                  />
                  <Text style={[
                    styles.formatButtonText,
                    shareFormat === 'qr' && styles.activeFormatButtonText,
                  ]}>
                    QR Code
                  </Text>
                </TouchableOpacity>

                <TouchableOpacity
                  style={[
                    styles.formatButton,
                    shareFormat === 'text' && styles.activeFormatButton,
                  ]}
                  onPress={() => setShareFormat('text')}
                >
                  <MaterialIcons
                    name="text-snippet"
                    size={20}
                    color={shareFormat === 'text' ? '#FFFFFF' : '#666666'}
                  />
                  <Text style={[
                    styles.formatButtonText,
                    shareFormat === 'text' && styles.activeFormatButtonText,
                  ]}>
                    Text
                  </Text>
                </TouchableOpacity>
              </View>

              {/* QR Code View */}
              {shareFormat === 'qr' && (
                <View style={styles.qrContainer}>
                  {isGenerating ? (
                    <View style={styles.loadingContainer}>
                      <MaterialIcons name="hourglass-empty" size={48} color="#999999" />
                      <Text style={styles.loadingText}>Generating QR Code...</Text>
                    </View>
                  ) : qrData ? (
                    <>
                      <View style={styles.qrCodeWrapper}>
                        <QRCode
                          value={qrData}
                          size={qrSize}
                          backgroundColor="white"
                          color="black"
                          logo={require('../../assets/images/icon.png')} // Add your app icon
                          logoSize={qrSize * 0.15}
                          logoBackgroundColor="white"
                        />
                      </View>
                      <Text style={styles.qrInstruction}>
                        Scan this QR code to share emergency medical information with first responders
                      </Text>
                    </>
                  ) : (
                    <View style={styles.errorContainer}>
                      <MaterialIcons name="error" size={48} color="#FF3B30" />
                      <Text style={styles.errorText}>Failed to generate QR code</Text>
                    </View>
                  )}
                </View>
              )}

              {/* Text Preview */}
              {shareFormat === 'text' && (
                <View style={styles.textPreview}>
                  <Text style={styles.previewTitle}>Text Format Preview:</Text>
                  <View style={styles.previewContent}>
                    <Text style={styles.previewHeader}>
                      üö® EMERGENCY MEDICAL INFORMATION
                    </Text>
                    <Text style={styles.previewText}>
                      Child: {emergencyProfile.childName}
                    </Text>
                    <Text style={styles.previewText}>
                      Date of Birth: {emergencyProfile.dateOfBirth}
                    </Text>

                    {emergencyProfile.medicalInfo.allergies.length > 0 && (
                      <>
                        <Text style={styles.previewSectionHeader}>‚ö†Ô∏è ALLERGIES:</Text>
                        {emergencyProfile.medicalInfo.allergies.slice(0, 2).map((allergy, index) => (
                          <Text key={index} style={styles.previewListItem}>‚Ä¢ {allergy}</Text>
                        ))}
                        {emergencyProfile.medicalInfo.allergies.length > 2 && (
                          <Text style={styles.previewMore}>
                            ... and {emergencyProfile.medicalInfo.allergies.length - 2} more
                          </Text>
                        )}
                      </>
                    )}

                    {primaryContact && (
                      <>
                        <Text style={styles.previewSectionHeader}>üìû EMERGENCY CONTACT:</Text>
                        <Text style={styles.previewText}>
                          {primaryContact.name} ({primaryContact.relationship})
                        </Text>
                        <Text style={styles.previewText}>
                          Phone: {primaryContact.phoneNumber}
                        </Text>
                      </>
                    )}

                    <Text style={styles.previewFooter}>
                      Generated by NestSync Emergency System
                    </Text>
                  </View>
                </View>
              )}

              {/* Emergency Summary */}
              <View style={styles.summaryContainer}>
                <Text style={styles.summaryTitle}>Information Included:</Text>
                <View style={styles.summaryList}>
                  <View style={styles.summaryItem}>
                    <MaterialIcons name="person" size={16} color="#34C759" />
                    <Text style={styles.summaryText}>Basic information & age</Text>
                  </View>
                  {emergencyProfile.medicalInfo.allergies.length > 0 && (
                    <View style={styles.summaryItem}>
                      <MaterialIcons name="warning" size={16} color="#FF3B30" />
                      <Text style={styles.summaryText}>
                        {emergencyProfile.medicalInfo.allergies.length} allergies
                      </Text>
                    </View>
                  )}
                  {emergencyProfile.medicalInfo.medicalConditions.length > 0 && (
                    <View style={styles.summaryItem}>
                      <MaterialIcons name="medical-information" size={16} color="#FF6B00" />
                      <Text style={styles.summaryText}>
                        {emergencyProfile.medicalInfo.medicalConditions.length} medical conditions
                      </Text>
                    </View>
                  )}
                  {primaryContact && (
                    <View style={styles.summaryItem}>
                      <MaterialIcons name="phone" size={16} color="#007AFF" />
                      <Text style={styles.summaryText}>Emergency contact details</Text>
                    </View>
                  )}
                </View>
              </View>
            </ScrollView>

            {/* Action Buttons */}
            <View style={styles.actionButtons}>
              {shareFormat === 'text' && (
                <TouchableOpacity
                  style={[styles.shareButton, isEmergencyMode && styles.emergencyButton]}
                  onPress={shareAsText}
                  accessibilityLabel="Share emergency information as text"
                  accessibilityRole="button"
                >
                  <MaterialIcons name="share" size={24} color="#FFFFFF" />
                  <Text style={styles.shareButtonText}>Share as Text</Text>
                </TouchableOpacity>
              )}

              <TouchableOpacity
                style={styles.cancelButton}
                onPress={handleClose}
                accessibilityLabel="Cancel sharing"
                accessibilityRole="button"
              >
                <Text style={styles.cancelButtonText}>Close</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </BlurView>
    </Modal>
  );
};

const styles = StyleSheet.create({
  overlay: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modalContainer: {
    width: '90%',
    maxWidth: 400,
    maxHeight: '80%',
  },
  modalContent: {
    backgroundColor: '#FFFFFF',
    borderRadius: 20,
    overflow: 'hidden',
  },
  emergencyModalContent: {
    borderWidth: 2,
    borderColor: '#FF3B30',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#F2F2F7',
  },
  headerLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  headerText: {
    marginLeft: 12,
    flex: 1,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#000000',
  },
  emergencyTitle: {
    color: '#FF3B30',
  },
  subtitle: {
    fontSize: 14,
    color: '#666666',
    marginTop: 2,
  },
  closeButton: {
    padding: 8,
  },
  scrollContent: {
    maxHeight: 500,
  },
  formatSelector: {
    flexDirection: 'row',
    margin: 20,
    backgroundColor: '#F2F2F7',
    borderRadius: 12,
    padding: 4,
  },
  formatButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    borderRadius: 8,
  },
  activeFormatButton: {
    backgroundColor: '#007AFF',
  },
  formatButtonText: {
    marginLeft: 8,
    fontSize: 16,
    fontWeight: '500',
    color: '#666666',
  },
  activeFormatButtonText: {
    color: '#FFFFFF',
  },
  qrContainer: {
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingBottom: 20,
  },
  qrCodeWrapper: {
    padding: 20,
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    borderWidth: 1,
    borderColor: '#E5E5E7',
    marginBottom: 16,
    elevation: 2,
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  qrInstruction: {
    fontSize: 14,
    color: '#666666',
    textAlign: 'center',
    lineHeight: 20,
  },
  loadingContainer: {
    alignItems: 'center',
    paddingVertical: 40,
  },
  loadingText: {
    fontSize: 16,
    color: '#666666',
    marginTop: 12,
  },
  errorContainer: {
    alignItems: 'center',
    paddingVertical: 40,
  },
  errorText: {
    fontSize: 16,
    color: '#FF3B30',
    marginTop: 12,
  },
  textPreview: {
    margin: 20,
  },
  previewTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#000000',
    marginBottom: 12,
  },
  previewContent: {
    backgroundColor: '#F8F9FA',
    borderRadius: 12,
    padding: 16,
    borderWidth: 1,
    borderColor: '#E9ECEF',
  },
  previewHeader: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#FF3B30',
    marginBottom: 8,
  },
  previewSectionHeader: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#000000',
    marginTop: 8,
    marginBottom: 4,
  },
  previewText: {
    fontSize: 14,
    color: '#333333',
    marginBottom: 4,
  },
  previewListItem: {
    fontSize: 14,
    color: '#333333',
    marginLeft: 12,
    marginBottom: 2,
  },
  previewMore: {
    fontSize: 12,
    color: '#666666',
    fontStyle: 'italic',
    marginLeft: 12,
  },
  previewFooter: {
    fontSize: 12,
    color: '#666666',
    marginTop: 12,
    fontStyle: 'italic',
  },
  summaryContainer: {
    margin: 20,
    marginTop: 0,
  },
  summaryTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#000000',
    marginBottom: 12,
  },
  summaryList: {
    backgroundColor: '#F8F9FA',
    borderRadius: 12,
    padding: 16,
  },
  summaryItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  summaryText: {
    fontSize: 14,
    color: '#333333',
    marginLeft: 8,
  },
  actionButtons: {
    padding: 20,
    paddingTop: 0,
  },
  shareButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#007AFF',
    paddingVertical: 16,
    borderRadius: 12,
    marginBottom: 12,
  },
  emergencyButton: {
    backgroundColor: '#FF3B30',
  },
  shareButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold',
    marginLeft: 8,
  },
  cancelButton: {
    alignItems: 'center',
    paddingVertical: 16,
  },
  cancelButtonText: {
    color: '#666666',
    fontSize: 16,
    fontWeight: '500',
  },
});

export default EmergencyShareModal;