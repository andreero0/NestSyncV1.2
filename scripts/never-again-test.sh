#!/bin/bash
# "Never Again" Authentication Protection System Test
# Validates all business continuity measures are working correctly

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
TEST_LOG="/tmp/never-again-test.log"
BACKEND_URL="${BACKEND_URL:-http://localhost:8001}"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $1" | tee -a "$TEST_LOG"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}" | tee -a "$TEST_LOG"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}" | tee -a "$TEST_LOG"
}

error() {
    echo -e "${RED}‚ùå $1${NC}" | tee -a "$TEST_LOG"
}

header() {
    echo -e "${PURPLE}‚ïê‚ïê‚ïê $1 ‚ïê‚ïê‚ïê${NC}" | tee -a "$TEST_LOG"
}

# Initialize test log
echo "Never Again Authentication Protection System Test" > "$TEST_LOG"
echo "Started: $(date)" >> "$TEST_LOG"
echo "Backend URL: $BACKEND_URL" >> "$TEST_LOG"
echo "========================================" >> "$TEST_LOG"

header "NEVER AGAIN SYSTEM VALIDATION"
echo "Testing all business continuity measures..."
echo ""

# Test results tracking
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

run_test() {
    local test_name="$1"
    local test_command="$2"

    ((TOTAL_TESTS++))
    log "Running: $test_name"

    if eval "$test_command" >> "$TEST_LOG" 2>&1; then
        success "$test_name - PASSED"
        ((PASSED_TESTS++))
        return 0
    else
        error "$test_name - FAILED"
        ((FAILED_TESTS++))
        return 1
    fi
}

# Layer 1: Prevention Tests
header "LAYER 1: PREVENTION SYSTEM"

run_test "Dependency Validation Script" \
    "cd '$PROJECT_ROOT/NestSync-backend' && source venv/bin/activate && python -c \"import gotrue; assert gotrue.__version__ == '2.5.4', f'gotrue version {gotrue.__version__} != 2.5.4'; print('‚úÖ Critical gotrue dependency validated')\""

run_test "Docker Build Validation" \
    "grep -q 'gotrue==2.5.4' '$PROJECT_ROOT/NestSync-backend/requirements-minimal-dev.txt'"

run_test "CI/CD Quality Gate Workflow" \
    "test -f '$PROJECT_ROOT/.github/workflows/auth-quality-gate.yml'"

run_test "Requirements Lock Verification" \
    "cd '$PROJECT_ROOT/NestSync-backend' && pip freeze | grep -q 'gotrue==2.5.4'"

echo ""

# Layer 2: Detection Tests
header "LAYER 2: DETECTION SYSTEM"

run_test "Monitoring Script Functionality" \
    "python3 '$PROJECT_ROOT/scripts/monitoring-alerts.py' --single"

run_test "Health Check Endpoints" \
    "curl -f '$BACKEND_URL/health/auth'"

run_test "Smoke Test Script" \
    "'$PROJECT_ROOT/scripts/auth-smoke-test.sh' single"

run_test "Monitoring Deployment Script" \
    "'$PROJECT_ROOT/scripts/start-monitoring.sh' status"

echo ""

# Layer 3: User Protection Tests
header "LAYER 3: USER PROTECTION SYSTEM"

run_test "Error Handler Module" \
    "test -f '$PROJECT_ROOT/NestSync-frontend/lib/auth/errorHandler.ts'"

run_test "User-Friendly Error Mapping" \
    "cd '$PROJECT_ROOT/NestSync-frontend' && npx tsc --noEmit --skipLibCheck lib/auth/errorHandler.ts"

run_test "Authentication Integration" \
    "grep -q 'handleAuthError' '$PROJECT_ROOT/NestSync-frontend/app/(auth)/login.tsx'"

run_test "Support Contact System" \
    "grep -q 'contactSupport' '$PROJECT_ROOT/NestSync-frontend/lib/auth/errorHandler.ts'"

echo ""

# Layer 4: Recovery Tests
header "LAYER 4: RECOVERY SYSTEM"

run_test "Rollback Script Functionality" \
    "'$PROJECT_ROOT/scripts/auth-rollback.sh' test"

run_test "Backup System" \
    "'$PROJECT_ROOT/scripts/auth-rollback.sh' backup > /dev/null"

run_test "Health Testing" \
    "'$PROJECT_ROOT/scripts/auth-rollback.sh' health"

run_test "Service Management" \
    "test -x '$PROJECT_ROOT/scripts/start-monitoring.sh'"

echo ""

# Business Continuity Documentation Tests
header "DOCUMENTATION AND PROCEDURES"

run_test "Business Continuity Plan" \
    "test -f '$PROJECT_ROOT/docs/business-continuity/authentication-disaster-recovery.md'"

run_test "Monitoring Scripts" \
    "test -x '$PROJECT_ROOT/scripts/monitoring-alerts.py'"

run_test "Integration Scripts" \
    "test -x '$PROJECT_ROOT/scripts/never-again-test.sh'"

run_test "Emergency Procedures" \
    "grep -q 'Emergency Procedures' '$PROJECT_ROOT/docs/business-continuity/authentication-disaster-recovery.md'"

echo ""

# Real Authentication Flow Test
header "LIVE AUTHENTICATION TESTING"

run_test "Backend Health Check" \
    "curl -s '$BACKEND_URL/health' | grep -q 'healthy'"

run_test "Authentication Health Check" \
    "curl -s '$BACKEND_URL/health/auth' | grep -q 'healthy'"

run_test "GraphQL Endpoint" \
    "curl -s -X POST -H 'Content-Type: application/json' -d '{\"query\": \"{ __schema { types { name } } }\"}' '$BACKEND_URL/graphql' | grep -q 'data'"

# Check for critical failures
auth_response=$(curl -s "$BACKEND_URL/health/auth" 2>/dev/null || echo "{}")
critical_failures=$(echo "$auth_response" | jq -r '.critical_failures[]?' 2>/dev/null || echo "")

if [ -n "$critical_failures" ]; then
    error "Critical authentication failures detected: $critical_failures"
    ((FAILED_TESTS++))
else
    success "No critical authentication failures detected"
    ((PASSED_TESTS++))
fi

((TOTAL_TESTS++))

echo ""

# Summary Report
header "NEVER AGAIN SYSTEM TEST RESULTS"

echo "üìä Test Summary:"
echo "   Total Tests: $TOTAL_TESTS"
echo "   Passed: $PASSED_TESTS"
echo "   Failed: $FAILED_TESTS"
echo "   Success Rate: $(( PASSED_TESTS * 100 / TOTAL_TESTS ))%"
echo ""

if [ $FAILED_TESTS -eq 0 ]; then
    success "üéâ ALL TESTS PASSED - NEVER AGAIN SYSTEM FULLY OPERATIONAL"
    echo ""
    echo "‚úÖ Your business is protected against authentication failures"
    echo "‚úÖ Four-layer defense system is active and functional"
    echo "‚úÖ Automatic detection and recovery is operational"
    echo "‚úÖ Users will never see technical error messages"
    echo "‚úÖ Business continuity is assured"
    echo ""
    echo "üöÄ Production deployment confidence: MAXIMUM"
    echo "üìä Authentication reliability: BULLETPROOF"
    echo ""

    # Show monitoring status
    log "Current monitoring status:"
    "$PROJECT_ROOT/scripts/start-monitoring.sh" status 2>/dev/null || warning "Monitoring not currently active"

    echo ""
    echo "Commands to remember:"
    echo "  Monitor status: ./scripts/start-monitoring.sh status"
    echo "  Test system: ./scripts/never-again-test.sh"
    echo "  Emergency rollback: ./scripts/auth-rollback.sh auto"
    echo "  View documentation: docs/business-continuity/authentication-disaster-recovery.md"

    exit 0
else
    error "üö® SOME TESTS FAILED - REVIEW REQUIRED"
    echo ""
    echo "‚ùå $FAILED_TESTS test(s) failed out of $TOTAL_TESTS total"
    echo "üìã Check test log for details: $TEST_LOG"
    echo "üîß Fix failing components before production deployment"
    echo ""
    echo "Priority actions:"
    echo "1. Review failed tests in log file"
    echo "2. Fix underlying issues"
    echo "3. Re-run this test to verify fixes"
    echo "4. Ensure all layers are operational before production"

    exit 1
fi