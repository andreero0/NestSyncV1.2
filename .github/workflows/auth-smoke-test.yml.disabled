# NestSync Authentication Smoke Tests
# Runs every 15 minutes to validate critical authentication paths
# Prevents gotrue-class authentication failures from reaching production

name: Authentication Smoke Tests

on:
  schedule:
    # Run every 15 minutes during business hours (9 AM - 6 PM ET)
    - cron: '*/15 9-18 * * 1-5'
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [main, feature/*, fix/*]
    paths:
      - 'NestSync-backend/app/auth/**'
      - 'NestSync-backend/requirements.txt'
      - 'NestSync-frontend/lib/auth/**'
      - '.github/workflows/auth-smoke-test.yml'

jobs:
  auth-smoke-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          NestSync-frontend/package-lock.json

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Start NestSync Development Environment
      run: |
        cd docker
        docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d

        # Wait for services to be healthy
        timeout 180 bash -c 'until docker-compose -f docker-compose.yml -f docker-compose.dev.yml ps | grep -q "Up.*healthy"; do sleep 5; done'

    - name: Verify Backend Health
      run: |
        # Wait for backend to be ready with retries
        echo "Waiting for backend to be ready..."
        for i in {1..30}; do
          if curl -f http://localhost:8001/health; then
            echo "Backend health check passed"
            break
          else
            echo "Waiting for backend... (attempt $i/30)"
            sleep 10
          fi
          if [ $i -eq 30 ]; then
            echo "Backend health check failed after 5 minutes"
            exit 1
          fi
        done

        # Test GraphQL schema introspection
        echo "Testing GraphQL endpoint..."
        response=$(curl -X POST http://localhost:8001/graphql \
          -H "Content-Type: application/json" \
          -d '{"query": "{ __schema { types { name } } }"}')

        echo "GraphQL Response: $response"
        echo "$response" | jq -e '.data.__schema.types' > /dev/null

    - name: Install Playwright
      run: |
        npm install -g @playwright/test
        npx playwright install chromium

    - name: Authentication Smoke Test - Sign In Flow
      run: |
        npx playwright test --config=.github/workflows/playwright.config.js auth-smoke-test.spec.js

    - name: Test Dependency Versions
      run: |
        # Verify gotrue version in Docker container matches requirements.txt
        echo "Checking gotrue version in container..."
        docker exec nestsync-backend pip list | grep gotrue || echo "gotrue not found or container not ready"

        if docker exec nestsync-backend pip list | grep -q gotrue; then
          CONTAINER_VERSION=$(docker exec nestsync-backend pip list | grep gotrue | awk '{print $2}')
          echo "Container gotrue version: $CONTAINER_VERSION"

          if grep -q "gotrue==" NestSync-backend/requirements.txt; then
            REQUIRED_VERSION=$(grep "gotrue==" NestSync-backend/requirements.txt | cut -d'=' -f3)
            echo "Required gotrue version: $REQUIRED_VERSION"

            if [ "$CONTAINER_VERSION" != "$REQUIRED_VERSION" ]; then
              echo "WARNING: gotrue version mismatch. Container: $CONTAINER_VERSION, Required: $REQUIRED_VERSION"
              echo "This may cause authentication issues but not failing the build for now"
            else
              echo "âœ… Gotrue versions match"
            fi
          else
            echo "No specific gotrue version pinned in requirements.txt"
          fi
        else
          echo "Could not verify gotrue version - container may not be ready"
        fi

    - name: Cleanup
      if: always()
      run: |
        cd docker
        docker-compose -f docker-compose.yml -f docker-compose.dev.yml down -v

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: auth-smoke-test
    if: failure()

    steps:
    - name: Create GitHub Issue on Authentication Failure
      uses: actions/github-script@v7
      with:
        script: |
          const title = `ðŸš¨ CRITICAL: Authentication Smoke Test Failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          ## Critical Authentication Failure Detected

          **Failure Type**: Authentication smoke test failed
          **Time**: ${new Date().toISOString()}
          **Workflow**: ${{ github.workflow }}
          **Run**: ${{ github.run_id }}

          ### Immediate Actions Required:
          1. Check authentication system status
          2. Verify gotrue SDK version compatibility
          3. Test with credentials: parents@nestsync.com / Shazam11#
          4. Review Docker container dependency versions

          ### Investigation Steps:
          1. Check backend logs for Pydantic validation errors
          2. Verify field mapping in authentication responses
          3. Confirm Docker rebuild completed successfully
          4. Test authentication on multiple platforms

          **Priority**: P0 Critical - Blocks all user authentication
          **Labels**: authentication, p0-critical, infrastructure-failure

          This represents a potential 10th critical infrastructure failure. Immediate investigation required.
          `;

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['authentication', 'p0-critical', 'infrastructure-failure', 'smoke-test-failure']
          });